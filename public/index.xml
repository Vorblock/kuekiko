<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kuekiko` blog</title>
    <link>https://kuekiko.top/</link>
    <description>Recent content on Kuekiko` blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 15 Sep 2020 11:06:01 +0800</lastBuildDate>
    
	<atom:link href="https://kuekiko.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reading</title>
      <link>https://kuekiko.top/reading/</link>
      <pubDate>Sun, 02 Oct 2016 21:49:20 +0200</pubDate>
      
      <guid>https://kuekiko.top/reading/</guid>
      <description>大多数都是已买已看&amp;amp;已买未看&amp;amp;白嫖电子书&amp;amp;PDFx版
 计算机基础&amp;amp;语言基础  汇编语言 C Primer plus 5 C++ Primer plus 5 Python 核心编程 python黑客攻防入门 锋利的jquery javascript Dom编程艺术 java程序设计 kotlin程序入门开发 Windows Socket 网络编程 编码-隐匿在计算机软硬件背后的语言 程序员的自我修养-链接、装载与库 编译原理 Linux内核分析   逆向&amp;amp;漏洞利用  逆向工程权威指南（上下） Linux二进制分析 有趣的二进制 漏洞战争软件漏洞分析精要 C/C++安全编码 内核漏洞的利用与防范 软件调试（第二版） 卷一 硬件基础 硬件安全攻防大揭秘  移动安全&amp;amp;开发  Android软件安全与逆向分析 Android软件安全攻防实例分析 Android安全攻防实战 Android安全攻防权威指南 Android安全攻防指南 Android应用安全防护和逆向分析 iOS应用逆向与安全 游戏安全-手游安全技术入门 最强Android书-构架大剖析 Android软件安全权威指南 最强iOS和macOS安全宝典  Web安全&amp;amp;渗透  kali-linux 渗透测试的艺术  Other  重构 改善既有代码设计 Wireshark数据包分析实战详解 代码整洁之道-程序员的职业素养 信息隐藏技术 离散的世界  小说&amp;amp;&amp;amp;  三体（三部曲） 盗墓笔记（完整） 龙族（完整） 鬼吹灯（部分） 态度 简明英语写作手册  参考链接  https://github.</description>
    </item>
    
    <item>
      <title>Todo</title>
      <link>https://kuekiko.top/todo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kuekiko.top/todo/</guid>
      <description>拖延症晚期患者治疗记录    保持更新 （奔溃&amp;hellip;重启中&amp;hellip;）
  日常记录
  CVE学习
  Fritoo 工具开发 (&amp;hellip;.)
  改Fuzzing
  挖洞&amp;hellip;.
  </description>
    </item>
    
    <item>
      <title>日记</title>
      <link>https://kuekiko.top/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</link>
      <pubDate>Mon, 06 Aug 2018 11:13:06 +0800</pubDate>
      
      <guid>https://kuekiko.top/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</guid>
      <description>乱七八糟的日记 七天国庆，死肥宅的日常修炼 10.1 昨晚大约3天才睡，第二天更是没精神。学了一个晚上Linux提权。
早上8点钟醒，下雨ing，开始懒床。又不小心睡着了。醒来已经是11点。起床，吃饭，打开电脑，开始了修炼的第一天。心里很是烦躁，天气又冷，好想回到被窝里继续暖着。（这才是死肥宅该过的日子）。
下午出去吃了碗米线，买了一些备战粮食，晚上继续刚。不弄懂坚决不睡觉！
10.2 停电时怎么一肥事。起床就发现停电了，电脑无法开机，手机没充电。热水也没有。好恐怖，随便洗漱，直接冲到实验室。
今天的打算是看完同态加密的那篇论文。然而，看完一脸懵逼，计组、电路、离散的知识早就不记得那么多了。明天继续理解，做点其他的吧。放松了一下。然后不小心把招新的网站调崩了，算了，睡觉去了。
10.3 不想通宵的晚上，聊着聊着就差不多2点了。早上起床失败，12点钟到实验室，真是怠惰呀。先把招新网站调好。话了好几个小时，终于搞完了。后面还是看论文。心累呀，作业还没做。计划的C++复习又耽搁了。zoom了一下，被指导之后忽然有点豁然开朗。明天真的要按计划完成作业。后面吧知识点补上，要补的知识点有：逻辑门运算，加法器相关知识、硬件上二进制的加减乘除。
10.4 今天也很元气满满的哟。早上不知道做了什么，中午吃了冒菜。下午好困，还是坚持看完了同态加密的BGV的基础知识，虽然还是有点懵逼，但是比之前完全懵逼好很多了。
 知识点：  10.5 躺尸ing。C++知识补充ing。调HElib加密操作。终于是弄懂了这个库的基本操作。
10.6 搞一整天的HElib，二进制的XOR门什么的。作业什么的，完全没做呀。
10.7 不知不觉国庆长假（？）就没了，怎么感觉什么都没发生。。就没了？明天开学，今天补作业。
2018-11月 日记写在博客还是麻烦、日记从此写在平时世界APP上。
2018-11-03-08 部分日记用手机端的平行世界上去了，比较方便写&amp;hellip;
2018-11-02 星期五 没课，
2018-11-01 星期四 写各种实验报告。
2018-10月 2018-10-29-31 这个月结束了。。。
2018-10-22-28 6天 这段时间不知道做了些什么，补了些乱七八糟的东西。打了一些乱七八糟的CTF。
2018-10-21 星期天 今天决定就把云计算的团队退了，以后就安心学移动安全和看一些IoT吧。补知识ing。
2018-10-18-20 咸鱼的生活，第八周了很多课要做大作业，还得赶。。
2018-10-17 星期三 雾霾w(ﾟДﾟ)w。
2018-10-15-16 课比较多的两天。花时间调库，补C++ing。
2018-10-14 星期天 昨晚又通宵了。早上起床困难。今天为了出题，试了一波音频隐写，jpg隐写，又配了一下抓包的环境。出了一道很简单的题。没达到想要的效果。
2018-10-13 星期六 终于周末了，护网杯打开-&amp;gt;护网杯结束。 电影院看了《无双》。over。
2018-10-10 - 12 赶作业+屁事不断。Helib库基本搞懂了，对二级制的加减乘除也基本搞懂了，会弄half adder -&amp;gt; full adder了。
2018-10-09 星期二 满课的一天，还要忙奖学金的事情。今天可以说是最烦的一天。做不完的事情，空闲时间都不知道用来干嘛了。
2018-10-08 星期一 上课生涯又开始了。早起的开始。无聊啊，这些课都没啥意义，像小白鼠一样的拿来做实验似的。
招新赛开始，题目还没出完，学了新的东西，忘记了旧的知识。。只打算出两道Android的。</description>
    </item>
    
    <item>
      <title>Syzkaller-Android</title>
      <link>https://kuekiko.top/posts/2020/09/syzkaller-android/</link>
      <pubDate>Tue, 15 Sep 2020 11:06:01 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2020/09/syzkaller-android/</guid>
      <description>0x00 前言 介绍使用syzkaller fuzz Android的配置教程。
0x01 环境 按要安装好环境
 go syzkaller 交叉编译aarch64-linux-android、g++-aarch64-linux-gnu、gcc-arm-linux-gnueabihf、g++-arm-linux-gnueabihf  0x02 配置 创建配置文件android.cfg
{ &amp;#34;target&amp;#34;: &amp;#34;linux/arm64&amp;#34;, // arm &amp;#34;http&amp;#34;: &amp;#34;127.0.0.1:56741&amp;#34;, &amp;#34;workdir&amp;#34;: &amp;#34;$GOPATH/src/github.com/google/syzkaller/workdir&amp;#34;, &amp;#34;kernel_obj&amp;#34;: &amp;#34;$KERNEL&amp;#34;, // 内核路径 &amp;#34;syzkaller&amp;#34;: &amp;#34;$GOPATH/src/github.com/google/syzkaller&amp;#34;, &amp;#34;sandbox&amp;#34;: none, &amp;#34;procs&amp;#34;: 8, &amp;#34;type&amp;#34;: &amp;#34;adb&amp;#34;, &amp;#34;cover&amp;#34;: true, &amp;#34;vm&amp;#34;: { &amp;#34;devices&amp;#34;: [$DEVICES], &amp;#34;battery_check&amp;#34;: true } }   KASAN+KCOV编译内核
  首先编译要fuzz的Android版本输入手机。（过程省略）[1]
  下载编译基准内核。[2] ，使用手动编译会报错，使用给KASCAN文档[3]的方法也可能报错。
## 创建文件夹 mkdir android-kernel &amp;amp;&amp;amp; cd android-kernel ## 切换分支 repo init -u https://android.googlesource.com/kernel/manifest -b BRANCH repo sync ## 修改内核build文件 内核路径下的build.</description>
    </item>
    
    <item>
      <title>WSL2开启kvm</title>
      <link>https://kuekiko.top/posts/2020/07/wsl2%E5%BC%80%E5%90%AFkvm/</link>
      <pubDate>Fri, 24 Jul 2020 22:47:12 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2020/07/wsl2%E5%BC%80%E5%90%AFkvm/</guid>
      <description>0x00 前言 之前想着用wsl2去跑qemu，发现很多内核pwn题给的环境需要开启-enable-kvm选项，还有自己编译的内核也没法，然而wsl2没法开启kvm，解决办法就是去把hype-v给关了，老老实实用vmware/vmbox开个虚拟机，这样每次都要切来切去很麻烦。
直到看到vmware和vmbox都可以与hype-v并存，以为看到了曙光，没想到是没法开启虚拟化选项的。
后来看到WSL上这个Issues，当时也没这么多评论，不过暂且能用脚本实现。不过还是很麻烦。
最后看了这篇文章，跟着试了一遍，一直没报错，最后还是不行。某天又去看了看issuse，发现这个办法要最新阅览版。更新后一个新的发现就是wsl2速度明显变快了。。
0x01 环境   Windows 10 2004 20175.1000
  Windows Feature Experience Pack 120.18201.0.0
  wsl2 - Ubuntu 20
  Intel i7-8550U
  WSL-Linux-kernel: 4.19.121-microsoft-standard 
  qemu 5.0
  0x02 编译Kernel sudo apt -y install build-essential libncurses-dev bison flex libssl-dev libelf-dev cpu-checker qemu-kvm tar -xf WSL2-Linux-Kernel-4.19.121-microsoft-standard.tar.gz cd WSL2-Linux-Kernel-4.19.104-microsoft-standard/ ## cp Microsoft/config-wsl .config 有bug 使用最新版commit已修复 make menuconfig .config文件用这个 或者这个</description>
    </item>
    
    <item>
      <title>CVE-2019-2215分析利用记录</title>
      <link>https://kuekiko.top/posts/2020/06/cve-2019-2215%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 30 Jun 2020 01:15:26 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2020/06/cve-2019-2215%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>0x00 前言 CVE-2019-2215最初是由syzbot(syzkaller bot)在2017年发现的一个bug，在2018年初该bug被修复，没有分配CVE编号，但是该补丁没有向后移植到许多已发布的设备上,比如Pixel和pixel2。
Project Zero的**Maddie Stone (@maddiestone)**根据Google的威胁情报小组（TAG）的情报报告再次发现的该bug，她在2019年9月报告了该漏洞。TAG确认其已用于现实攻击中，TAG表示该漏洞利用可能跟一家出售漏洞和利用工具的以色列公司NSO有关，随后NSO集团发言人公开否认与该漏洞存在任何关系。
0x01 分析环境  Android avd api29 x86_64 kernel：q-goldfish-android-goldfish-4.14-dev commit id 7a3cee43e935b9d526ad07f20bf005ba7e74d05b pixel Android 10 kernel 3.18  0x02 漏洞分析 漏洞为内核上Bind IPC的一个UAF漏洞，成功利用可本地提权，无需进行任何交互，已被恶意软件利用。
原理分析 先看一个project-zero公开的poc
/* binder_poll() passes the thread-&amp;gt;wait waitqueue that can be slept on for work. When a thread that uses epoll explicitly exits using BINDER_THREAD_EXIT, the waitqueue is freed, but it is never removed from the corresponding epoll data structure. When the process subsequently exits, the epoll cleanup code tries to access the waitlist, which results in a use-after-free.</description>
    </item>
    
    <item>
      <title>Unicorn简单学习使用记录</title>
      <link>https://kuekiko.top/posts/2020/04/unicorn%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 17 Apr 2020 19:01:19 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2020/04/unicorn%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>0x00 介绍 Unicorn是一个轻量级, 多平台, 多架构的CPU模拟器框架，基于qemu开发，它可以代替CPU模拟代码的执行，常用于恶意代码分析，Fuzz等。
0x01 安装   官网有编译好不同平台的二进制包，直接安装就行。但是看了一下时间2017年的，qemu已经升级好几个版本了。api也比较老旧。
  去github看了一下是否有在更新，发现一直有在更新，不过好像也没更新啥，只是修复一些bug，下载git源码，自己编译。目前最新1.0.2rc
git clone https://github.com/unicorn-engine/unicorn.git cd unicorn # UNICORN_ARCHS=&amp;#34;arm aarch64 x86&amp;#34; ./make.sh # 设置要编译的架构 可选 默认6种全编译 (Arm, Arm64, M68K, Mips, Sparc, &amp;amp; X86) ./make.sh sudo ./make.sh install # python 绑定 cd bindings/python sudo python3 setup.py install 还有更多交叉编译选项参考 文档
  0x02 简单使用 C :
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;unicorn/unicorn.h&amp;gt; // 要模拟的指令 #define X86_CODE32 &amp;#34;\x41\x4a&amp;#34; // INC ecx; DEC edx  // 起始地址 #define ADDRESS 0x1000000  int main(int argc, char const *argv[]){ // 设置engine  uc_engine *uc; uc_err err; //设置寄存器  int r_ecx = 0x1234; int r_edx = 0x5678; printf(&amp;#34;Emulate i386 code\n&amp;#34;); // x86 32bit 初始化  err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;amp;uc); if (err !</description>
    </item>
    
    <item>
      <title>Syzkaller fuzzing 入门</title>
      <link>https://kuekiko.top/posts/2020/04/syzkaller-fuzzing-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 10 Apr 2020 18:59:00 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2020/04/syzkaller-fuzzing-%E5%85%A5%E9%97%A8/</guid>
      <description>0x00 介绍 syzkaller是google的安全研究人员开发并维护的内核fuzz工具。它主要是用go写的，也有少部分C代码，支持akaros/fuchsia/linux/android/freebsd/netbsd/openbsd/windows等系统，发现的漏洞多达上千。
0x01 环境配置 环境要求：
  C/C++ 编译器
 GCC 6.1.0+    linux kernel
 编译 v4.6以后编译时确保CONFIG_KCOV=y 之前版本：这样添加支持 一些额外选项    VM 一般QEMU
 支持QEMU、kvmtool和GCE虚拟机、Android设备和Odroid C2开发板 需要进行通信：vm要提供网络支持 vm配置需要ssh服务器 要能执行ssh -i $SSHID -p $PORT root@localhost 需要将debugfs 挂在到 /sys/kernel/debug    Golang 安装
wget https://dl.google.com/go/go1.14.1.linux-amd64.tar.gz tar -C ~/goroot -xzf go1.14.1.linux-amd64.tar.gz vim /etc/profile mkdir /usr/local/gopath # 添加export export GOROOT=/home/kuekiko/goroot export GOPATH=/home/kuekiko/gopath export PATH=$GOROOT/bin:$PATH export PATH=$GOPATH/bin:$PATH source etc/profile   syzkaller</description>
    </item>
    
    <item>
      <title>Android之jemalloc</title>
      <link>https://kuekiko.top/posts/2020/04/android%E4%B9%8Bjemalloc/</link>
      <pubDate>Sun, 05 Apr 2020 18:18:59 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2020/04/android%E4%B9%8Bjemalloc/</guid>
      <description>0x00 简单介绍 想调一个CVE、发现对jemalloc 了解太少。重新复习复习jemalloc，做个记录。
jemalloc最初是2005年 Jason Evans开发的新一代内存分配器， 之后没多久被添加到FreeBSD的libc中的默认内存分配器，用来替代原来的phkmalloc。2007年 Firefox Mozilla项目的独立版本也将jemalloc作为主要的分配器。2009年，Facebook 的后端项目也广泛使用jemalloc。2014年，Android 5 开始采用jemalloc作为主要的内存分配器，不过部分Android5/6依然能看到dlmalloc和jemalloc两者并存。
jemalloc的一些特性与设计原则：
 强大的多核/多线程分配能力. 最小化的元数据开销 基于每个线程进行缓存，避免了同步问题。 避免了连续分配内存的碎片化问题。 简洁高效  0x01 结构  jemalloc对内存划分按照如下由高到低的顺序:
   内存是由一定数量的arenas进行管理. 一个arena被分割成若干chunks, 后者主要负责记录bookkeeping（记录信息）. chunk内部又包含着若干runs, 作为分配小块内存的基本单元. run由pages组成, 最终被划分成一定数量的regions 对于small size的分配请求来说, 这些region就相当于user memory.   arenas 对于Android来说：
限制了只使用两个arenas,每个带有一个lock。这意味着，不同线程尝试分配内存时，会循环、平均分配至两个arena，确保两个arena有大致相等的进程数量。只有在相同的arena中分配内存时才需要获取lock。
#/android.bp android_product_variables = { // Only enable the tcache on non-svelte configurations, to save PSS.  malloc_not_svelte: { cflags: [ &amp;#34;-UANDROID_MAX_ARENAS&amp;#34;, &amp;#34;-DANDROID_MAX_ARENAS=2&amp;#34;, &amp;#34;-DJEMALLOC_TCACHE&amp;#34;, &amp;#34;-DANDROID_TCACHE_NSLOTS_SMALL_MAX=8&amp;#34;, &amp;#34;-DANDROID_TCACHE_NSLOTS_LARGE=16&amp;#34;, ], }, } 用shadow查看arenas</description>
    </item>
    
    <item>
      <title>Qemu&#43;gdb调试Linux内核</title>
      <link>https://kuekiko.top/posts/2019/08/qemu-gdb%E8%B0%83%E8%AF%95linux%E5%86%85%E6%A0%B8/</link>
      <pubDate>Wed, 28 Aug 2019 23:24:18 +0800</pubDate>
      
      <guid>https://kuekiko.top/posts/2019/08/qemu-gdb%E8%B0%83%E8%AF%95linux%E5%86%85%E6%A0%B8/</guid>
      <description>前言 调试Linux内核可以使用VM双机调试，不过使用qemu来调试会更加方便。
环境搭建 编译源码 首先到Linux FTP仓库或者官网下载对应版本的源码。
这里下载的是linux-4.10.10
解压tar -xvJf linux-4.10.10.tar.xz
安装依赖
sudo apt install build-essential ncurses-dev xz-utils libssl-dev bc fakeroot aptitude libncurses5-dev ​ sudo apt install qemu 编译内核 make menuconfig 进行配置：KernelHacking —&amp;gt; Compile-time checks and compiler options选中
Compile the kernel with debug infoCompile the kernel with frame pointersProvide GDB scripts for kernel debuggingProcessor type and features→去掉Paravirtualized guest support保存退出。
命令make -jN 进行编译
之后make all
make modules编译完成之后，vmlinux在源码根目录、bzImage在./arch/x86/boot/下</description>
    </item>
    
  </channel>
</rss>